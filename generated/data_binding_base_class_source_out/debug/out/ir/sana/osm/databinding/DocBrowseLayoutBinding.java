// Generated by view binder compiler. Do not edit!
package ir.sana.osm.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import ir.sana.osm.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DocBrowseLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CoordinatorLayout docBrowse;

  @NonNull
  public final RecyclerView docBrowseListview;

  @NonNull
  public final TextView docFolderParent;

  @NonNull
  public final TextView docFolderPath;

  private DocBrowseLayoutBinding(@NonNull LinearLayout rootView,
      @NonNull CoordinatorLayout docBrowse, @NonNull RecyclerView docBrowseListview,
      @NonNull TextView docFolderParent, @NonNull TextView docFolderPath) {
    this.rootView = rootView;
    this.docBrowse = docBrowse;
    this.docBrowseListview = docBrowseListview;
    this.docFolderParent = docFolderParent;
    this.docFolderPath = docFolderPath;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DocBrowseLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DocBrowseLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.doc_browse_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DocBrowseLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.doc_browse;
      CoordinatorLayout docBrowse = ViewBindings.findChildViewById(rootView, id);
      if (docBrowse == null) {
        break missingId;
      }

      id = R.id.doc_browse_listview;
      RecyclerView docBrowseListview = ViewBindings.findChildViewById(rootView, id);
      if (docBrowseListview == null) {
        break missingId;
      }

      id = R.id.doc_folder_parent;
      TextView docFolderParent = ViewBindings.findChildViewById(rootView, id);
      if (docFolderParent == null) {
        break missingId;
      }

      id = R.id.doc_folder_path;
      TextView docFolderPath = ViewBindings.findChildViewById(rootView, id);
      if (docFolderPath == null) {
        break missingId;
      }

      return new DocBrowseLayoutBinding((LinearLayout) rootView, docBrowse, docBrowseListview,
          docFolderParent, docFolderPath);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
